#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'


def create_category(name)
  eval <<EOD
class #{name} < Array
  def inspect()
    #{name.dump} + super
  end
end
EOD
end
#create_category("Target")
create_category("VList")
create_category("Term")
create_category("Apply")
create_category("Abst")

class LambdaParser < Racc::Parser

module_eval(<<'...end lambda.y/module_eval...', 'lambda.y', 34)
  def initialize(lexer)
    @lexer = lexer
    super()
  end

  def parse
    do_parse
  end

  def next_token
    @lexer.next_token
  end
...end lambda.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,     3,     4,    16,     5,     3,     4,    15,     5,     3,
     4,    12,     5,     3,     4,     7,     5,     3,     4,    14,
     5,     3,     4,    13,     5 ]

racc_action_check = [
     2,     2,     2,    11,     2,     4,     4,    11,     4,     0,
     0,     5,     0,    15,    15,     1,    15,    10,    10,    10,
    10,    17,    17,     7,    17 ]

racc_action_pointer = [
     6,    15,    -2,   nil,     2,     8,   nil,    23,   nil,   nil,
    14,     0,   nil,   nil,   nil,    10,   nil,    18 ]

racc_action_default = [
    -9,    -9,    -9,    -2,    -9,    -9,    -7,    -9,    -1,    -8,
    -9,    -9,    -5,    18,    -3,    -9,    -6,    -4 ]

racc_goto_table = [
     9,     2,     1,    11,   nil,    10,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,     9,    17 ]

racc_goto_check = [
     3,     2,     1,     4,   nil,     2,   nil,   nil,     3,   nil,
   nil,   nil,   nil,   nil,   nil,     3,     2 ]

racc_goto_pointer = [
   nil,     2,     1,    -2,    -2 ]

racc_goto_default = [
   nil,   nil,   nil,     6,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 9, :_reduce_1,
  1, 11, :_reduce_2,
  3, 11, :_reduce_3,
  4, 11, :_reduce_4,
  1, 12, :_reduce_5,
  2, 12, :_reduce_6,
  1, 10, :_reduce_7,
  2, 10, :_reduce_8 ]

racc_reduce_n = 9

racc_shift_n = 18

racc_token_table = {
  false => 0,
  :error => 1,
  :EOL => 2,
  :VAR => 3,
  "(" => 4,
  ")" => 5,
  "\\" => 6,
  "." => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EOL",
  "VAR",
  "\"(\"",
  "\")\"",
  "\"\\\\\"",
  "\".\"",
  "$start",
  "target",
  "expr",
  "term",
  "var_list" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'lambda.y', 3)
  def _reduce_1(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'lambda.y', 5)
  def _reduce_2(val, _values, result)
     result = Term.new.replace val 
    result
  end
.,.,

module_eval(<<'.,.,', 'lambda.y', 6)
  def _reduce_3(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'lambda.y', 7)
  def _reduce_4(val, _values, result)
     result = Abst.new.replace [val[1],val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'lambda.y', 8)
  def _reduce_5(val, _values, result)
     result = VList.new.replace val 
    result
  end
.,.,

module_eval(<<'.,.,', 'lambda.y', 9)
  def _reduce_6(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'lambda.y', 11)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'lambda.y', 12)
  def _reduce_8(val, _values, result)
     result = Apply.new.replace val 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class LambdaParser
